#ifndef __NEO_VM_ASTDEF__
#define __NEO_VM_ASTDEF__
enum NEO_AST_TYPE {
  NEO_AST_TYPE_NULL = 0,
  NEO_AST_TYPE_BOOLEAN,
  NEO_AST_TYPE_NUMBER,
  NEO_AST_TYPE_STRING,
  NEO_AST_TYPE_SYMBOL,
  NEO_AST_TYPE_CONVERT,
  NEO_AST_TYPE_ADD,
  NEO_AST_TYPE_SUBTRACT,
  NEO_AST_TYPE_MULTIPLY,
  NEO_AST_TYPE_DIVIDE,
  NEO_AST_TYPE_MODULU,
  NEO_AST_TYPE_INCREMENT,
  NEO_AST_TYPE_DECREMENT,
  NEO_AST_TYPE_EQUAL,
  NEO_AST_TYPE_NOT_EQUAL,
  NEO_AST_TYPE_GREATER,
  NEO_AST_TYPE_GREATER_AND_EQUAL,
  NEO_AST_TYPE_LESS,
  NEO_AST_TYPE_LESS_AND_EQUAL,
  NEO_AST_TYPE_LOGIC_AND,
  NEO_AST_TYPE_LOGIC_OR,
  NEO_AST_TYPE_LOGIC_NOT,
  NEO_AST_TYPE_AND,
  NEO_AST_TYPE_OR,
  NEO_AST_TYPE_XOR,
  NEO_AST_TYPE_NOT,
  NEO_AST_TYPE_LEFT_SHIFT,
  NEO_AST_TYPE_RIGHT_SHIFT,
  NEO_AST_TYPE_SET,
  NEO_AST_TYPE_ADD_AND_SET,
  NEO_AST_TYPE_SUBTRACT_AND_SET,
  NEO_AST_TYPE_MULTIPLY_AND_SET,
  NEO_AST_TYPE_DIVIDE_AND_SET,
  NEO_AST_TYPE_MODULU_AND_SET,
  NEO_AST_TYPE_AND_AND_SET,
  NEO_AST_TYPE_OR_AND_SET,
  NEO_AST_TYPE_XOR_AND_SET,
  NEO_AST_TYPE_LEFT_SHIFT_AND_SET,
  NEO_AST_TYPE_RIGHT_SHIFT_AND_SET,
  NEO_AST_TYPE_COMMA
};
#endif